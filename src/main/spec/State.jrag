
aspect State {

	public Frame Method.createFrame() {
		Set<Frame> result = new HashSet<Frame>();

		int index = 0;	
		Set<Integer> indexes = new HashSet<Integer>();
		
		if ( !getIsStatic() ) 
			indexes.add(index++);
			
		for ( org.apache.bcel.generic.Type argType : getArgTypes() ) {
			if ( argType instanceof org.apache.bcel.generic.ReferenceType ) 
				indexes.add(index);
			index++;	
		}	
		return new Frame(indexes, getMaxLocals());
	}	

	coll Set<Frame> Instruction.framesIn() circular [new HashSet<Frame>()] with addAll root Method;
	Instruction contributes framesOut() to Instruction.framesIn() for each successors();
	
	syn Set<Frame> EntryPoint.framesIn() = Collections.singleton(method().createFrame());

	syn Set<Frame> Instruction.framesOut() circular [new HashSet<Frame>()]; 
      	
	eq Instruction.framesOut() =
		Frames.processFrames(framesIn(), new FrameProcessor() {
			@Override public Frame process(Frame original) {
				OpStack opStack = original.getOpStack();
				
				if ( getProduceStack() > getConsumeStack() ) 
					for ( int i = 0; i < getProduceStack() - getConsumeStack(); i++ ) 
						opStack = opStack.push(DontCareSlot.NORMAL_SLOT);
				else
					opStack = opStack.pop(getConsumeStack() - getProduceStack());

				if ( !opStack.equals(original.getOpStack()) ) 
					return new Frame(
						original.getLocalVars(), 
						opStack, 
						original.getCg());
				else 
					return original;	
			}
		});
		
	eq ArrayLength.framesOut() =
		Frames.processFrames(framesIn(), new FrameProcessor() {
			@Override public Frame process(Frame original) {
				return new Frame(
					original.getLocalVars(), 
					original.getOpStack().pop().push(DontCareSlot.NORMAL_SLOT), 
					original.getCg()); 
			}
		});
	
	eq Athrow.framesOut() =
		Frames.processFrames(framesIn(), new FrameProcessor() {
			@Override public Frame process(Frame original) {
				return new Frame(
					original.getLocalVars(), 
					original.getOpStack().pop(getConsumeStack()).push(original.getOpStack().peek()), 
					original.getCg()); 
			}
		});		
	
	
	eq AconstNull.framesOut() =
		Frames.processFrames(framesIn(), new FrameProcessor() {
			@Override public Frame process(Frame original) {
				ConnectionGraph cg = original.getCg();
				ObjectNode obj = InternalObject.getNullObject();
				ReferenceNode ref = new ReferenceNode(getPosition(), Category.LOCAL);
				cg = cg.addReferenceAndTarget(ref, obj); 
				return new Frame(
					original.getLocalVars(), 
					original.getOpStack().pop(getConsumeStack()).push(ref), 
					cg); 
			}
		});
	
	syn ReferenceNode FieldAssignmentInstruction.getStoreObjectRef(Frame frame) = null;
	
	syn ReferenceNode PutField.getStoreObjectRef(Frame frame) =
		(ReferenceNode) frame.getOpStack().get(frame.getOpStack().size() -2);

	syn ReferenceNode Aastore.getStoreObjectRef(Frame frame) =
		(ReferenceNode) frame.getOpStack().get(frame.getOpStack().size() -3);
	
	syn ReferenceNode PutStatic.getStoreObjectRef(Frame frame) = frame.getCg().getGlobalReference();
				
	eq FieldAssignmentInstruction.framesOut() {
		// notation: obj.field = value
		return Frames.processFrames(framesIn(), new FrameProcessor() {
			@Override public Frame process(Frame original) {
				OpStack opStack = original.getOpStack();
				ConnectionGraph cg = original.getCg();
				
				// inspect type of value 
				Slot value = opStack.peek();
				
				if ( value instanceof ReferenceNode ) {
					Set<ObjectNode> referredValues = cg.dereference((ReferenceNode) value);
					
					for ( ObjectNode obj : cg.dereference(getStoreObjectRef(original)) ) 
						for ( ObjectNode referredValue : referredValues ) 
							cg = cg.addField(obj, getFieldName(), referredValue);
				}
				
				return new Frame(
					original.getLocalVars(), 
					opStack.pop(getConsumeStack()), 
					cg);
			}
		});	
	}
	
	
	syn ReferenceNode FieldLoadInstruction.getLoadObjectRef(Frame frame) = null;
	
	syn ReferenceNode GetField.getLoadObjectRef(Frame frame) =
		(ReferenceNode) frame.getOpStack().get(frame.getOpStack().size() -1);

	syn ReferenceNode Aaload.getLoadObjectRef(Frame frame) =
		(ReferenceNode) frame.getOpStack().get(frame.getOpStack().size() -2);		
	
	syn ReferenceNode GetStatic.getLoadObjectRef(Frame frame) = frame.getCg().getGlobalReference();
	

	eq FieldLoadInstruction.framesOut() =
		// notation: load obj.field 
		Frames.processFrames(framesIn(), new FrameProcessor() {
			@Override public Frame process(Frame original) {
				OpStack opStack = original.getOpStack();
				ConnectionGraph cg = original.getCg();
				Slot result;
				
				if ( getFieldType() instanceof org.apache.bcel.generic.ReferenceType ) {
					result = new ReferenceNode(getPosition(), Category.LOCAL);
					Set<ObjectNode> allTargets = new HashSet<ObjectNode>();

					for ( ObjectNode obj :  cg.dereference(getLoadObjectRef(original))) {
//						if ( obj.isGlobal() ) {
//							allTargets.add(obj);
//							continue;
//						}
			
						Set<ObjectNode> targets 
							= cg.getObjectNodes().getFieldOf(obj, cg.getFieldEdges(), getFieldName());
						if ( targets.isEmpty() ) {
							ObjectNode subObject = 
								PhantomObject.newSubPhantom(obj, getFieldName());
							cg = cg.addField(obj, getFieldName(), subObject);
							targets.add(subObject);
						}
						allTargets.addAll(targets);
					}
							
					cg = cg.addReferenceToTargets((ReferenceNode) result, allTargets);
					
				} else 
					result = DontCareSlot.values()[getProduceStack()];					
					
				return new Frame(
					original.getLocalVars(), 
					opStack.pop(getConsumeStack()).push(result, getProduceStack()), 
					cg);									
			}
		});	

	eq Ldc.framesOut() =
		Frames.processFrames(framesIn(), new FrameProcessor() {
			@Override public Frame process(Frame original) {			
				return new Frame(
					original.getLocalVars(), 
					original.getOpStack().push(
						(getConstantType() instanceof org.apache.bcel.generic.ReferenceType ) ? 
						original.getCg().getGlobalReference() 
						: DontCareSlot.NORMAL_SLOT), 
					original.getCg());
			}
		});	

			
	eq NewInstruction.framesOut() =
		Frames.processFrames(framesIn(), new FrameProcessor() {
			@Override public Frame process(Frame original) {
				ConnectionGraph cg = original.getCg();
				
				ObjectNode obj = new InternalObject(
					method().clazz().getName() + "." 
						+ method().getMethodName() + "|"
						+ method().getSignatureIndex() + ":"
						+ getPosition(), 
					getType(), 
					ClassHelper.isRunnable(getType()) ? EscapeState.GLOBAL_ESCAPE : EscapeState.NO_ESCAPE);
					
				ReferenceNode ref = new ReferenceNode(getPosition(), Category.LOCAL);
				cg = cg.addReferenceAndTarget(ref, obj); 
				return new Frame(
					original.getLocalVars(), 
					original.getOpStack().pop(getConsumeStack()).push(ref), 
					cg); 
			}
		});
	
	eq InvokeInstruction.framesOut() {
		Set<Frame> result = new HashSet<Frame>();

		for ( Frame frameIn : framesIn() ) 
			for ( Method targetMethod : resolveTargetMethod() ) 
				result.add(frameIn.applyMethodSummary(
					targetMethod.methodSummary(), 
					getConsumeStack(), 
					getProduceStack(), 
					getReturnType()));
					
		return result;
	}
		
	eq LoadInstruction.framesOut() =
		Frames.processFrames(framesIn(), new FrameProcessor() {
			@Override public Frame process(Frame original) {
				return new Frame(
					original.getLocalVars(), 
					original.getOpStack().push(original.getLocalVars().get(getIndex()), 
						getProduceStack()), 
					original.getCg());
			}
		});
	
	eq StoreInstruction.framesOut() =
		Frames.processFrames(framesIn(), new FrameProcessor() {
			@Override public Frame process(Frame original) {
				return new Frame(
					original.getLocalVars().set(getIndex(), 
					original.getOpStack().peek()), original.getOpStack().pop(getConsumeStack()), 
					original.getCg());
			}
		});
	
	eq DUP.framesOut() =
		Frames.processFrames(framesIn(), new FrameProcessor() {
			@Override public Frame process(Frame original) {
				return new Frame(
					original.getLocalVars(), 
					original.getOpStack().push(original.getOpStack().peek()), 
					original.getCg());
			}
		});
	
	eq DUP_X1.framesOut() =
		Frames.processFrames(framesIn(), new FrameProcessor() {
			@Override public Frame process(Frame original) {				
				return new Frame(
					original.getLocalVars(), 
					original.getOpStack().pop().pop().push(original.getOpStack().peek())
						.push(original.getOpStack().pop().peek()).push(original.getOpStack().peek()), 
					original.getCg());
			}
		});
	
	eq DUP_X2.framesOut() =
		Frames.processFrames(framesIn(), new FrameProcessor() {
			@Override public Frame process(Frame original) {				
				return new Frame(
					original.getLocalVars(), 
					original.getOpStack().pop().pop().pop().push(original.getOpStack().peek())
						.push(original.getOpStack().pop().pop().peek())
						.push(original.getOpStack().pop().peek())
						.push(original.getOpStack().peek()), 
					original.getCg());
			}
		});
	
	eq DUP2.framesOut() =
		Frames.processFrames(framesIn(), new FrameProcessor() {
			@Override public Frame process(Frame original) {
				return new Frame(
					original.getLocalVars(), 
					original.getOpStack().push(original.getOpStack().pop().peek())
						.push(original.getOpStack().peek()), 
					original.getCg());
			}
		});
	
	eq DUP2_X1.framesOut() =
		Frames.processFrames(framesIn(), new FrameProcessor() {
			@Override public Frame process(Frame original) {
				return new Frame(
					original.getLocalVars(), 
					original.getOpStack().pop().pop().pop()
						.push(original.getOpStack().pop().peek())
						.push(original.getOpStack().peek())
						.push(original.getOpStack().pop().pop().peek())
						.push(original.getOpStack().pop().peek())
						.push(original.getOpStack().peek()), 
					original.getCg());
			}
		});
	
	eq DUP2_X2.framesOut() =
		 Frames.processFrames(framesIn(), new FrameProcessor() {
			@Override public Frame process(Frame original) {
				return new Frame(
					original.getLocalVars(), 
					original.getOpStack().pop().pop().pop().pop()
						.push(original.getOpStack().pop().peek())
						.push(original.getOpStack().peek())
						.push(original.getOpStack().pop().pop().pop().peek())
						.push(original.getOpStack().pop().pop().peek())
						.push(original.getOpStack().pop().peek())
						.push(original.getOpStack().peek()), 
					original.getCg());
			}
		});
	
	eq SWAP.framesOut() =
		Frames.processFrames(framesIn(), new FrameProcessor() {
			@Override public Frame process(Frame original) {
				return new Frame(
					original.getLocalVars(), 
					original.getOpStack().pop().pop()
						.push(original.getOpStack().peek())
						.push(original.getOpStack().pop().peek()), 
					original.getCg());
			}
		});
	
	eq ReturnInstruction.framesOut() = null;
	eq Areturn.framesOut() = null;
		
}