
aspect DynamicOrder {
	
	syn Instruction Method.lookup(int position) {
		for ( Instruction instruction : getInstructions() ) 
			if ( instruction.getPosition() == position ) 
				return instruction;
		return null;
	}
	
	inh Instruction Instruction.localLookup(int position);	
	eq Method.getInstruction(int i).localLookup(int position) = lookup(position);
	
	syn Instruction GotoInstruction.target() = localLookup(getTargetPosition());	
	
	syn Set<Instruction> BranchInstruction.targets() {
		Set<Instruction> targets = new HashSet<Instruction>();
		for ( int targetPos : getTargetPositions() ) 
			targets.add(localLookup(targetPos)); 
		return targets;	
	}
	
	// successors 
	
	syn Set<Instruction> Instruction.successors();
	
	eq Instruction.successors() = Collections.singleton(next());
	eq GotoInstruction.successors() = Collections.singleton(target());

	eq BranchInstruction.successors() {
		Set<Instruction> result = new HashSet<Instruction>();
		result.add(next());
		result.addAll(targets());
		return result;
	}
		
	eq ReturnInstruction.successors() = Collections.singleton(method().exitPoint());		
	eq Athrow.successors() = Collections.singleton(method().exitPoint());
	eq ExitPoint.successors() = new HashSet<Instruction>();

	
	// predecessors 

	coll Set<Instruction> Instruction.predecessors() [new HashSet<Instruction>()] with add root Method;
  
  	Instruction contributes this
    	to Instruction.predecessors()
    	for each successors();
    	
}