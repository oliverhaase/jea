
aspect MethodConfinement {

	syn Set<String> Program.confinedClasses() {
		Set<String> result = new HashSet<String>();
		
		for ( ByteCodeClass clazz : getByteCodeClasss() )
			if ( !escapingTypes().contains(clazz.getName()) )
				result.add(clazz.getName());
				
		return result;
	}
	
	syn Set<String> Program.escapingClasses() {
		Set<String> result = listClassNames();
		for ( Iterator<String> it = result.iterator(); it.hasNext(); ) 
			if ( confinedClasses().contains(it.next()) )
				it.remove();
				
		return result;		
	}
	
	
	syn Set<String> Program.listClassNames() {
		Set<String> result = new HashSet<String>();
		for ( ByteCodeClass clazz : getByteCodeClasss() )
			result.add(clazz.getName());
		return result;
	}
		
	syn EscapingTypes Program.escapingTypes() {
		EscapingTypes result = new EscapingTypes();
		for ( ByteCodeClass clazz : getByteCodeClasss() )
			result = result.merge(clazz.escapingTypes(listClassNames()));
		return result;		
	}
	
	

	syn EscapingTypes ByteCodeClass.escapingTypes(Set<String> base) {
		boolean intersect = false;
		
		for ( String createdClass : creates() ) 
			if ( base.contains(createdClass) ) 
				intersect = true;
				
		if ( !intersect )
			return new EscapingTypes(); 		
	
		EscapingTypes result = globallyEscapingTypes();
		result = result.merge(argEscapingTypes());
		return result;		
	}


	syn EscapingTypes ByteCodeClass.globallyEscapingTypes() {
		EscapingTypes result = new EscapingTypes();
		for ( Method method : getMethods() )
			result = result.merge(method.globallyEscapingTypes());
		return result;		
	}

	syn EscapingTypes ByteCodeClass.argEscapingTypes() {
		EscapingTypes result = new EscapingTypes();
		for ( Method method : getMethods() )
			if ( !method.getIsPrivate() )
				result = result.merge(method.argEscapingTypes());
		return result;		
	}
	
	syn EscapingTypes Method.globallyEscapingTypes() {
		return methodSummary().globallyEscapingTypes();
	}
	
	syn EscapingTypes Method.argEscapingTypes() {
		return methodSummary().argEscapingTypes();
	}	
	
}