
import java.util.Set;
import java.util.HashSet;


aspect StackConfinement {
/*
	public boolean Program.keepsConfined(String creature) {
		for ( ByteCodeClass clazz : getByteCodeClasss() ) 
			if ( !clazz.keepsConfined(creature) )
				return false;
		return true;		
	}
	
	public boolean ByteCodeClass.keepsConfined(String creature) {
		for ( Method method : getMethods() ) 
			if ( !method.keepsConfined(creature) )
				return false;
		return true;		
	}

	syn boolean Method.keepsConfined(String creature) {
		for ( Instruction instruction : getInstructions() )
			if ( !instruction.keepsConfined(creature) )
				return false;
		return true;
	}		
	
	syn boolean Instruction.keepsConfined(String creature) {
		return true;
	}
		
	syn boolean HeapAssignmentInstruction.keepsConfined(String creature) {
		for ( Frame frame : framesIn() ) 
			if ( frame.getOpStack().peek().equals(new InternalReferenceSlot(creature)) )
				return false;
		return true;		
	}	
	

	syn boolean InvokeSpecial.keepsConfined(String creature) {
		Set<OpStack> callerStacks = new HashSet<OpStack>();
		for ( Frame callerFrame : framesIn() ) 
			callerStacks.add(callerFrame.getOpStack());
				
		getTargetMethod().callerStacks = callerStacks;
		
		return getTargetMethod().keepsConfined(creature);
	}	
	*/	
}