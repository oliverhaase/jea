
aspect CallGraph {

	syn nta AlienClass Program.alienClass() = new AlienClass();
	syn nta AlienMethod AlienClass.alienMethod() = new AlienMethod();
	
	syn boolean Method.matches(String methodName, org.apache.bcel.generic.Type[] argTypes) {
		if ( !methodName.equals(getMethodName()) || argTypes.length != getArgTypes().length )
			return false;
			
		for ( int i = 0; i < argTypes.length; i++ ) 
			if (!argTypes[i].equals(getArgTypes()[i])) 
				return false;
			
		return true;
	}
	
	syn Method ByteCodeClass.lookup(String methodName, org.apache.bcel.generic.Type[] argTypes) {
		for ( Method method : getMethods() )
			if ( method.matches(methodName, argTypes))
				return method;
		return null;
	}
	
	syn ByteCodeClass ByteCodeClass.resolveTargetClass(String methodName, org.apache.bcel.generic.Type[] argTypes) {
        if (lookup(methodName, argTypes) != null)
            return this;
        else {
            if (this.getName().equals(getSuperClass())) // this == java.lang.Object
                return null;
            return program().getClass(getSuperClass()).resolveTargetClass(methodName, argTypes);
        }
    }
	
	syn Set<Method> InvokeInstruction.resolveTargetMethod(State frame) {
        Set<ByteCodeClass> classes = new HashSet<ByteCodeClass>();
        Set<Method> methods = new HashSet<Method>();
        boolean dynamicTypeIsUnkown = false;

        for (ObjectNode targetObject : frame.getHeap().dereference(
                (ReferenceNode) frame.getOpStack().getArgumentAtIndex(0, getConsumeStack()))) {
            if (targetObject instanceof InternalObject) {
                classes.add(method().clazz().program()
                        .getClass(((InternalObject) targetObject).getType()));
            } else {
                dynamicTypeIsUnkown = true;
            }
        }

        if (dynamicTypeIsUnkown) {
            for (String type : ClassPathFinder.getInstance().getSubTypsOf(getLoadClass())) {
                classes.add(method().clazz().program().getClass(type));
            }
        }

        for (ByteCodeClass clazz : classes) {
            ByteCodeClass target = clazz.resolveTargetClass(getMethodName(), getArgTypes());
            if (target != null)
                methods.add(target.lookup(getMethodName(), getArgTypes()));
        }

        return methods;
    }
	
	syn Set<Method> InvokeSpecial.resolveTargetMethod(State frame) =		
		Collections.singleton(method().clazz().program().getClass(getLoadClass())
    		.resolveTargetClass(getMethodName(), getArgTypes())
			.lookup(getMethodName(), getArgTypes()));
    		
	syn Set<Method> InvokeStatic.resolveTargetMethod(State frame) =		
		Collections.singleton(method().clazz().program().getClass(getLoadClass())
    		.resolveTargetClass(getMethodName(), getArgTypes())
			.lookup(getMethodName(), getArgTypes()));
	
			
}