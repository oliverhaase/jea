
aspect ReturnResult {
	
	syn Heap Instruction.returnResult() = null;
	
	syn Heap ReturnInstruction.returnResult() {
		Heap result = new Heap();
		
		for ( State state : statesIn() )
			result = result.merge(state.getHeap());
			
		return result;	
	}
	
	syn Heap Areturn.returnResult() {
		Heap result = new Heap();
		
		for ( State state : statesIn() )
			result = result.merge(state.getHeap().setReturnRef((ReferenceNode) state.getOpStack().peek()));
			
		return result;	
	}
	
	syn Heap Athrow.returnResult() {
		Heap result = new Heap();
		
		for ( State state : statesIn() )
			result = result.merge(state.getHeap().setReturnRef((ReferenceNode) state.getOpStack().peek()));
			
		return result;	
	}	
	
	syn Heap ExitPoint.returnResult() {
		Heap result = new Heap();
		for ( Instruction predecessor : pred() )
			result = result.merge(predecessor.returnResult());
		return result;	
	}
	
}